controller:
  admin:
    username: admin
    password: admin123

  env:
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: github-token
          key: username
    - name: GITHUB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: github-token
          key: password

  serviceType: LoadBalancer
  servicePort: 80
  targetPort: 8080

  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "250m"
      memory: "512Mi"

  persistence:
    enabled: true
    storageClass: gp2
    size: 10Gi

  installPlugins:
    - kubernetes:latest
    - workflow-aggregator:latest
    - git:latest
    - configuration-as-code:latest
    - credentials-binding:latest
    - github:latest
    - docker-plugin:latest
    - docker-workflow:latest
    - job-dsl:latest

  serviceAccount:
    name: jenkins-sa
    create: false
  
  # initScripts:
  #   create-seed: |
  #     import jenkins.model.*
  #     import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
  #     import hudson.plugins.git.*
  #     import org.jenkinsci.plugins.workflow.job.WorkflowJob

  #     def seedJob = Jenkins.instance.createProject(WorkflowJob, "seed-job")

  #     def scm = new GitSCM("https://github.com/Netaly79/my-microservice-project.git")
  #     scm.getUserRemoteConfigs()[0].credentialsId = "github-token"
  #     scm.branches = [new BranchSpec("*/main")]

  #     def definition = new CpsScmFlowDefinition(scm, "dj_project/jobs/seed.groovy")
  #     seedJob.definition = definition
  #     seedJob.save()
      
  jcasC:
    enabled: true
    defaultConfig: true
    configScripts:
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      scope: GLOBAL
                      id: github-token
                      username: ${GITHUB_USERNAME}
                      password: ${GITHUB_PASSWORD}
                      description: GitHub PAT
      seed-job: |                    
          - script: >
              job('seed-job') {
                description('Job to generate pipeline for Django project')
                scm {
                  git {
                    remote {
                      url('https://github.com/Netaly79/my-microservice-project.git')
                      credentials('github-token')
                    }
                    branches('*/jenkins')
                  }
                }
                steps {
                  dsl {
                    text: |
                      pipelineJob("goit-django-docker") {
                        definition {
                          cpsScm {
                            scm {
                              git {
                                remote {
                                  url('https://github.com/Netaly79/my-microservice-project.git')
                                  credentials("github-token")
                                }
                                branches("*/jenkins")
                              }
                            }
                          }
                        }
                      }
                  }
                }
              }